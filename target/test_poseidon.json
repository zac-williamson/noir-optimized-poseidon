{"noir_version":"0.25.0+3f676051a6073d6eabdc7fee68e4b522334344f6","hash":527099586700863626,"abi":{"parameters":[{"name":"x","type":{"kind":"field"},"visibility":"private"},{"name":"y","type":{"kind":"field"},"visibility":"public"}],"param_witnesses":{"x":[{"start":0,"end":1}],"y":[{"start":1,"end":2}]},"return_type":null,"return_witnesses":[]},"bytecode":"","debug_symbols":"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","file_map":{"20":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"47":{"source":"mod poseidon;\n\nfn main(x: Field, y: pub Field) {\n    let z = poseidon::bn254::hash_3([x, y, x + y]);\n    assert(z != y);\n}\n\n#[test]\nfn test_main() {\n    main(1, 2);\n    // Uncomment to make test fail\n    // main(1, 1);\n}\n","path":"/mnt/user-data/zac/hello_world/src/main.nr"},"50":{"source":"// Instantiations of Poseidon permutation for the prime field of the same order as BN254\n/// use consts::x5_2_config;\n// use bn254::permute;\n// use test_poseidon::PoseidonConfig;\n\nuse crate::poseidon::bn254::permute;\nuse crate::poseidon::PoseidonConfig;\nuse crate::poseidon::bn254::consts;\n\n#[field(bn254)]\npub fn x5_2(mut state: [Field; 2]) -> [Field; 2] {\n    state = permute(\n        consts::x5_2_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_3(mut state: [Field; 3]) -> [Field; 3] {\n    state = permute(\n        consts::x5_3_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_4(mut state: [Field; 4]) -> [Field; 4] {\n    state = permute(\n        consts::x5_4_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_5(mut state: [Field; 5]) -> [Field; 5] {\n    state = permute(\n        consts::x5_5_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_6(mut state: [Field; 6]) -> [Field; 6] {\n    state = permute(\n        consts::x5_6_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_7(mut state: [Field; 7]) -> [Field; 7] {\n    state = permute(\n        consts::x5_7_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_8(mut state: [Field; 8]) -> [Field; 8] {\n    state = permute(\n        consts::x5_8_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_9(mut state: [Field; 9]) -> [Field; 9] {\n    state = permute(\n        consts::x5_9_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_10(mut state: [Field; 10]) -> [Field; 10] {\n    state = permute(\n        consts::x5_10_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_11(mut state: [Field; 11]) -> [Field; 11] {\n    state = permute(\n        consts::x5_11_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_12(mut state: [Field; 12]) -> [Field; 12] {\n    state = permute(\n        consts::x5_12_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_13(mut state: [Field; 13]) -> [Field; 13] {\n    state = permute(\n        consts::x5_13_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_14(mut state: [Field; 14]) -> [Field; 14] {\n    state = permute(\n        consts::x5_14_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_15(mut state: [Field; 15]) -> [Field; 15] {\n    state = permute(\n        consts::x5_15_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_16(mut state: [Field; 16]) -> [Field; 16] {\n    state = permute(\n        consts::x5_16_config(),\n        state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_17(mut state: [Field; 17]) -> [Field; 17] {\n    state = permute(\n        consts::x5_17_config(),\n        state);\n\n    state\n}\n","path":"/mnt/user-data/zac/hello_world/src/poseidon/bn254/perm.nr"},"51":{"source":"// Instantiations of Poseidon constants, permutations and sponge for prime field of the same order as BN254\nmod perm;\nmod consts;\n\nuse crate::poseidon::PoseidonConfig;\nuse crate::poseidon::apply_matrix;\nuse crate::poseidon::apply_cheap_matrix;\n// Optimised permutation for this particular field; uses hardcoded rf and rp values,\n// which should agree with those in pos_conf.\n#[field(bn254)]\npub fn permute<M, N, O>(pos_conf: PoseidonConfig<M, N>, mut state: [Field; O]) -> [Field; O] {\n    let PoseidonConfig {t, rf: config_rf, rp: config_rp, alpha, ark, mds} = pos_conf;\n    let rf: u8 = 8;\n    let rp: u8 = [56, 57, 56, 60, 60, 63, 64, 63, 60, 66, 60, 65, 70, 60, 64, 68][state.len() - 2];\n\n    assert(t == state.len() as Field);\n    assert(rf == config_rf);\n    assert(rp == config_rp);\n\n    let mut count = 0;\n    // First half of full rounds\n    for _r in 0..rf / 2 {\n        for i in 0..state.len() {\n            state[i] = state[i] + ark[count + i];\n        } // Shift by round constants\n        for i in 0..state.len() {\n            state[i] = state[i].pow_32(alpha);\n        }\n\n        state = apply_matrix(mds, state); // Apply MDS matrix\n        count = count + t as u64;\n    }\n    // Partial rounds\n    for _r in 0..rp {\n        state[0] = state[0] + ark[count];\n        let x = state[0];\n        state[0] *= state[0];\n        state[0] *= state[0];\n        state[0] *= x;\n        //  state[0] = state[0].pow_32(alpha);\n        if (_r > 0) {\n            state = apply_cheap_matrix(mds, state); // Apply MDS matrix\n        }\n        count = count + t as u64;\n    }\n    // Second half of full rounds\n    for _r in 0..rf / 2 {\n        for i in 0..state.len() {\n            state[i] = state[i] + ark[count + i];\n        } // Shift by round constants\n        for i in 0..state.len() {\n            state[i] = state[i].pow_32(alpha);\n        }\n\n        state = apply_matrix(mds, state); // Apply MDS matrix\n        count = count + t as u64;\n    }\n\n    state\n}\n// Corresponding absorption.\n#[field(bn254)]\nfn absorb<M, N, O, P>(\n    pos_conf: PoseidonConfig<M, N>,\n    mut state: [Field; O], // Initial state; usually [0; O]\n    rate: Field, // Rate\n    capacity: Field, // Capacity; usually 1\n    msg: [Field; P] // Arbitrary length message\n) -> [Field; O] {\n    assert(pos_conf.t == rate + capacity);\n\n    let mut i = 0;\n\n    for k in 0..msg.len() {\n        // Add current block to state\n        state[capacity + i] += msg[k];\n        i = i+1;\n        // Enough to absorb\n        if i == rate {\n            state = permute(pos_conf, state);\n            i = 0;\n        }\n    }\n    // If we have one more block to permute\n    if i != 0 {\n        state = permute(pos_conf, state);\n    }\n\n    state\n}\n// Variable-length Poseidon-128 sponge as suggested in second bullet point of §3 of https://eprint.iacr.org/2019/458.pdf\n#[field(bn254)]\npub fn sponge<N>(msg: [Field; N]) -> Field {\n    absorb(consts::x5_5_config(), [0; 5], 4, 1, msg)[1]\n}\n// Various instances of the Poseidon hash function\n// Consistent with Circom's implementation\npub fn hash_1(input: [Field; 1]) -> Field {\n    let mut state = [0; 2];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_2(state)[0]\n}\n\npub fn hash_2(input: [Field; 2]) -> Field {\n    let mut state = [0; 3];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_3(state)[0]\n}\n\npub fn hash_3(input: [Field; 3]) -> Field {\n    let mut state = [0; 4];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_4(state)[0]\n}\n\npub fn hash_4(input: [Field; 4]) -> Field {\n    let mut state = [0; 5];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_5(state)[0]\n}\n\npub fn hash_5(input: [Field; 5]) -> Field {\n    let mut state = [0; 6];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_6(state)[0]\n}\n\npub fn hash_6(input: [Field; 6]) -> Field {\n    let mut state = [0; 7];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_7(state)[0]\n}\n\npub fn hash_7(input: [Field; 7]) -> Field {\n    let mut state = [0; 8];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_8(state)[0]\n}\n\npub fn hash_8(input: [Field; 8]) -> Field {\n    let mut state = [0; 9];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_9(state)[0]\n}\n\npub fn hash_9(input: [Field; 9]) -> Field {\n    let mut state = [0; 10];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_10(state)[0]\n}\n\npub fn hash_10(input: [Field; 10]) -> Field {\n    let mut state = [0; 11];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_11(state)[0]\n}\n\npub fn hash_11(input: [Field; 11]) -> Field {\n    let mut state = [0; 12];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_12(state)[0]\n}\n\npub fn hash_12(input: [Field; 12]) -> Field {\n    let mut state = [0; 13];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_13(state)[0]\n}\n\npub fn hash_13(input: [Field; 13]) -> Field {\n    let mut state = [0; 14];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_14(state)[0]\n}\n\npub fn hash_14(input: [Field; 14]) -> Field {\n    let mut state = [0; 15];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_15(state)[0]\n}\n\npub fn hash_15(input: [Field; 15]) -> Field {\n    let mut state = [0; 16];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_16(state)[0]\n}\n\npub fn hash_16(input: [Field; 16]) -> Field {\n    let mut state = [0; 17];\n    for i in 0..input.len() {\n        state[i+1] = input[i];\n    }\n\n    perm::x5_17(state)[0]\n}\n","path":"/mnt/user-data/zac/hello_world/src/poseidon/bn254.nr"}}}